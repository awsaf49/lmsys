{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":66631,"databundleVersionId":8346466,"sourceType":"competition"},{"sourceId":6063,"sourceType":"modelInstanceVersion","modelInstanceId":4684}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"<center><img src=\"https://keras.io/img/logo-small.png\" alt=\"Keras logo\" width=\"100\"><br/>\nThis starter notebook is provided by the Keras team.</center>","metadata":{}},{"cell_type":"markdown","source":"# LMSYS - Chatbot Arena Human Preference Predictions with [KerasNLP](https://github.com/keras-team/keras-nlp) and [Keras](https://github.com/keras-team/keras)\n\n<div align=\"center\">\n    <img src=\"https://i.ibb.co/wJMF5HL/lmsys.png\">\n</div>\n\nIn this competition, our aim is to predict which LLM responses users will prefer in a head-to-head battle between chatbots powered by large language models (LLMs). In other words, the goal of the competition is to predict the preferences of the judges and determine the likelihood that a given prompt/response pair is selected as the winner. This notebook will guide you through the process of fine-tuning the **DebertaV3** model for this competition using the **Shared Weight** strategy with KerasNLP. This strategy is similar to how Multiple Choice Question (MCQ) models are trained. Additionally, we will use mixed precision for faster training and inference.\n\n**Did you know**: This notebook is backend-agnostic, which means it supports TensorFlow, PyTorch, and JAX backends. However, the best performance can be achieved with `JAX`. KerasNLP and Keras enable the choice of the preferred backend. Explore further details on [Keras](https://keras.io/keras_3/).\n\n**Note**: For a deeper understanding of KerasNLP, refer to the [KerasNLP guides](https://keras.io/keras_nlp/).\n","metadata":{}},{"cell_type":"markdown","source":"# 📚 | Import Libraries ","metadata":{}},{"cell_type":"code","source":"import os\nos.environ[\"KERAS_BACKEND\"] = \"jax\"  # or \"tensorflow\" or \"torch\"\n\nimport keras_nlp\nimport keras\nimport tensorflow as tf\n\nimport numpy as np \nimport pandas as pd\nfrom tqdm import tqdm\nimport json\n\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport plotly.express as px","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-18T05:17:06.304196Z","iopub.execute_input":"2024-05-18T05:17:06.304539Z","iopub.status.idle":"2024-05-18T05:17:19.876356Z","shell.execute_reply.started":"2024-05-18T05:17:06.304511Z","shell.execute_reply":"2024-05-18T05:17:19.875574Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Library Version","metadata":{}},{"cell_type":"code","source":"print(\"TensorFlow:\", tf.__version__)\nprint(\"Keras:\", keras.__version__)\nprint(\"KerasNLP:\", keras_nlp.__version__)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T05:17:19.877782Z","iopub.execute_input":"2024-05-18T05:17:19.878333Z","iopub.status.idle":"2024-05-18T05:17:19.883192Z","shell.execute_reply.started":"2024-05-18T05:17:19.878307Z","shell.execute_reply":"2024-05-18T05:17:19.882261Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ⚙️ | Configuration","metadata":{}},{"cell_type":"code","source":"class CFG:\n    seed = 42  # Random seed\n    preset = \"deberta_v3_extra_small_en\" # Name of pretrained models\n    sequence_length = 512  # Input sequence length\n    epochs = 3 # Training epochs\n    batch_size = 24  # Batch size\n    scheduler = 'cosine'  # Learning rate scheduler\n    label2name = {0: 'winner_model_a', 1: 'winner_model_b', 2: 'winner_tie'}\n    name2label = {v:k for k, v in label2name.items()}\n    class_labels = list(label2name.keys())\n    class_names = list(label2name.values())","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T05:17:19.884495Z","iopub.execute_input":"2024-05-18T05:17:19.884821Z","iopub.status.idle":"2024-05-18T05:17:19.905036Z","shell.execute_reply.started":"2024-05-18T05:17:19.884791Z","shell.execute_reply":"2024-05-18T05:17:19.904106Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ♻️ | Reproducibility \nSets value for random seed to produce similar result in each run.","metadata":{}},{"cell_type":"code","source":"keras.utils.set_random_seed(CFG.seed)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:17:19.907085Z","iopub.execute_input":"2024-05-18T05:17:19.907356Z","iopub.status.idle":"2024-05-18T05:17:19.914327Z","shell.execute_reply.started":"2024-05-18T05:17:19.907333Z","shell.execute_reply":"2024-05-18T05:17:19.913496Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🧮 | Mixed Precision\n\nIn this notebook, we will use mixed precision instead of float32 precision for training and inference to reduce GPU memory usage. This will ultimately allow us to use larger batch sizes, thus reducing our training and inference time.","metadata":{}},{"cell_type":"code","source":"keras.mixed_precision.set_global_policy(\"mixed_float16\")","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:17:19.915497Z","iopub.execute_input":"2024-05-18T05:17:19.915767Z","iopub.status.idle":"2024-05-18T05:17:19.922796Z","shell.execute_reply.started":"2024-05-18T05:17:19.915745Z","shell.execute_reply":"2024-05-18T05:17:19.921871Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 📁 | Dataset Path ","metadata":{}},{"cell_type":"code","source":"BASE_PATH = '/kaggle/input/lmsys-chatbot-arena'","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:17:19.923879Z","iopub.execute_input":"2024-05-18T05:17:19.924185Z","iopub.status.idle":"2024-05-18T05:17:19.931354Z","shell.execute_reply.started":"2024-05-18T05:17:19.924158Z","shell.execute_reply":"2024-05-18T05:17:19.930459Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 📖 | Meta Data \n\nThe competition dataset comprises user interactions from the ChatBot Arena. In each interaction, a judge presents one or more prompts to two different large language models and then indicates which model provided the more satisfactory response. The training data contains `55,000` rows, with an expected `25,000` rows in the test set.\n\n## Files\n\n### `train.csv`\n- `id`: Unique identifier for each row.\n- `model_[a/b]`: Model identity, present in train.csv but not in test.csv.\n- `prompt`: Input prompt given to both models.\n- `response_[a/b]`: Model_[a/b]'s response to the prompt.\n- `winner_model_[a/b/tie]`: Binary columns indicating the judge's selection (ground truth target).\n\n### `test.csv`\n- `id`: Unique identifier for each row.\n- `prompt`: Input prompt given to both models.\n- `response_[a/b]`: Model_[a/b]'s response to the prompt.\n\n> Note that each interaction may have multiple prompts and responses, but this notebook will use only **one prompt per interaction**. You can choose to use all prompts and responses. Additionally, prompts and responses in the dataframe are provided as string-formatted lists, so they need to be converted to literal lists using `eval()`.\n","metadata":{}},{"cell_type":"markdown","source":"## Train Data","metadata":{}},{"cell_type":"code","source":"# Load Train Data\ndf = pd.read_csv(f'{BASE_PATH}/train.csv') \n\n# Sample data\n# df = df.sample(frac=0.10)\n\n# Take the first prompt and its associated response\ndf[\"prompt\"] = df.prompt.map(lambda x: eval(x)[0])\ndf[\"response_a\"] = df.response_a.map(lambda x: eval(x.replace(\"null\",\"''\"))[0])\ndf[\"response_b\"] = df.response_b.map(lambda x: eval(x.replace(\"null\", \"''\"))[0])\n\n# Label conversion\ndf[\"class_name\"] = df[[\"winner_model_a\", \"winner_model_b\" , \"winner_tie\"]].idxmax(axis=1)\ndf[\"class_label\"] = df.class_name.map(CFG.name2label)\n\n# Show Sample\ndf.head()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T05:17:19.932507Z","iopub.execute_input":"2024-05-18T05:17:19.932852Z","iopub.status.idle":"2024-05-18T05:17:23.784404Z","shell.execute_reply.started":"2024-05-18T05:17:19.9328Z","shell.execute_reply":"2024-05-18T05:17:23.783415Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Test Data","metadata":{}},{"cell_type":"code","source":"# Load Test Data\ntest_df = pd.read_csv(f'{BASE_PATH}/test.csv')\n\n# Take the first prompt and response\ntest_df[\"prompt\"] = test_df.prompt.map(lambda x: eval(x)[0])\ntest_df[\"response_a\"] = test_df.response_a.map(lambda x: eval(x.replace(\"null\",\"''\"))[0])\ntest_df[\"response_b\"] = test_df.response_b.map(lambda x: eval(x.replace(\"null\", \"''\"))[0])\n\n# Show Sample\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:17:23.785808Z","iopub.execute_input":"2024-05-18T05:17:23.786689Z","iopub.status.idle":"2024-05-18T05:17:23.808944Z","shell.execute_reply.started":"2024-05-18T05:17:23.786652Z","shell.execute_reply":"2024-05-18T05:17:23.808065Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Contextualize Response with Prompt\n\nIn our approach, we will contextualize each response with the prompt instead of using a single prompt for all responses. This means that for each response, we will provide the model with the same set of prompts combined with their respective response (e.g., `(P + R_A)`, `(P + R_B)`, etc.). This approach is similar to the multiple-choice question task in NLP.\n\n> Note that some prompts and responses may not be encoded with `utf-8`, resulting in errors when creating the dataloader. In such cases, we will replace them with an empty string.\n","metadata":{}},{"cell_type":"code","source":"# Define a function to create options based on the prompt and choices\ndef make_pairs(row):\n    row[\"encode_fail\"] = False\n    try:\n        prompt = row.prompt.encode(\"utf-8\").decode(\"utf-8\")\n    except:\n        prompt = \"\"\n        row[\"encode_fail\"] = True\n\n    try:\n        response_a = row.response_a.encode(\"utf-8\").decode(\"utf-8\")\n    except:\n        response_a = \"\"\n        row[\"encode_fail\"] = True\n\n    try:\n        response_b = row.response_b.encode(\"utf-8\").decode(\"utf-8\")\n    except:\n        response_b = \"\"\n        row[\"encode_fail\"] = True\n        \n    row['options'] = [f\"Prompt: {prompt}\\n\\nResponse: {response_a}\",  # Response from Model A\n                      f\"Prompt: {prompt}\\n\\nResponse: {response_b}\"  # Response from Model B\n                     ]\n    return row\n","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:17:23.810226Z","iopub.execute_input":"2024-05-18T05:17:23.810817Z","iopub.status.idle":"2024-05-18T05:17:23.817676Z","shell.execute_reply.started":"2024-05-18T05:17:23.810785Z","shell.execute_reply":"2024-05-18T05:17:23.816723Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df.apply(make_pairs, axis=1)  # Apply the make_pairs function to each row in df\ndisplay(df.head(2))  # Display the first 2 rows of df\n\ntest_df = test_df.apply(make_pairs, axis=1)  # Apply the make_pairs function to each row in df\ndisplay(test_df.head(2))  # Display the first 2 rows of df","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:17:23.820376Z","iopub.execute_input":"2024-05-18T05:17:23.820668Z","iopub.status.idle":"2024-05-18T05:17:30.067392Z","shell.execute_reply.started":"2024-05-18T05:17:23.820646Z","shell.execute_reply":"2024-05-18T05:17:30.066525Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Encoding Fail Statistics\n\nLet's examine how many samples have encoding issues. From the code below, we can see that only $1\\%$ of the samples failed to be encoded, while $99\\%$ of the samples don't have any issues. A similar pattern can be expected for the test data as well. Thus, considering empty strings for this small portion of the data will not have much impact on our training and inference.","metadata":{}},{"cell_type":"code","source":"df.encode_fail.value_counts(normalize=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T05:18:36.277852Z","iopub.execute_input":"2024-05-18T05:18:36.278287Z","iopub.status.idle":"2024-05-18T05:18:36.287672Z","shell.execute_reply.started":"2024-05-18T05:18:36.278253Z","shell.execute_reply":"2024-05-18T05:18:36.286511Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🎨 | Exploratory Data Analysis (EDA)","metadata":{}},{"cell_type":"markdown","source":"## LLM Distribution","metadata":{}},{"cell_type":"code","source":"model_df = pd.concat([df.model_a, df.model_b])\ncounts = model_df.value_counts().reset_index()\ncounts.columns = ['LLM', 'Count']\n\n# Create a bar plot with custom styling using Plotly\nfig = px.bar(counts, x='LLM', y='Count',\n             title='Distribution of LLMs',\n             color='Count', color_continuous_scale='viridis')\n\nfig.update_layout(xaxis_tickangle=-45)  # Rotate x-axis labels for better readability\n\nfig.show()\n","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:48:26.179842Z","iopub.execute_input":"2024-05-18T04:48:26.180101Z","iopub.status.idle":"2024-05-18T04:48:27.703896Z","shell.execute_reply.started":"2024-05-18T04:48:26.180078Z","shell.execute_reply":"2024-05-18T04:48:27.702977Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Winning Distribution","metadata":{}},{"cell_type":"code","source":"counts = df['class_name'].value_counts().reset_index()\ncounts.columns = ['Winner', 'Win Count']\n\nfig = px.bar(counts, x='Winner', y='Win Count',\n             title='Winner distribution for Train Data',\n             labels={'Winner': 'Winner', 'Win Count': 'Win Count'},\n             color='Winner', color_continuous_scale='viridis')\n\nfig.update_layout(xaxis_title=\"Winner\", yaxis_title=\"Win Count\")\n\nfig.show()\n","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:48:27.705159Z","iopub.execute_input":"2024-05-18T04:48:27.705532Z","iopub.status.idle":"2024-05-18T04:48:27.796404Z","shell.execute_reply.started":"2024-05-18T04:48:27.705505Z","shell.execute_reply":"2024-05-18T04:48:27.795413Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🔪 | Data Split\n\nIn the code snippet provided below, we will divide the existing data into training and validation using a stratification of `class_label` column.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split  # Import package\n\ntrain_df, valid_df = train_test_split(df, test_size=0.2, stratify=df[\"class_label\"])","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:48:27.80043Z","iopub.execute_input":"2024-05-18T04:48:27.800708Z","iopub.status.idle":"2024-05-18T04:48:28.243497Z","shell.execute_reply.started":"2024-05-18T04:48:27.800685Z","shell.execute_reply":"2024-05-18T04:48:28.242486Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🍽️ | Preprocessing\n\n**What it does:** The preprocessor takes input strings and transforms them into a dictionary (`token_ids`, `padding_mask`) containing preprocessed tensors. This process starts with tokenization, where input strings are converted into sequences of token IDs.\n\n**Why it's important:** Initially, raw text data is complex and challenging for modeling due to its high dimensionality. By converting text into a compact set of tokens, such as transforming `\"The quick brown fox\"` into `[\"the\", \"qu\", \"##ick\", \"br\", \"##own\", \"fox\"]`, we simplify the data. Many models rely on special tokens and additional tensors to understand input. These tokens help divide input and identify padding, among other tasks. Making all sequences the same length through padding boosts computational efficiency, making subsequent steps smoother.\n\nExplore the following pages to access the available preprocessing and tokenizer layers in **KerasNLP**:\n- [Preprocessing](https://keras.io/api/keras_nlp/preprocessing_layers/)\n- [Tokenizers](https://keras.io/api/keras_nlp/tokenizers/)","metadata":{}},{"cell_type":"code","source":"preprocessor = keras_nlp.models.DebertaV3Preprocessor.from_preset(\n    preset=CFG.preset, # Name of the model\n    sequence_length=CFG.sequence_length, # Max sequence length, will be padded if shorter\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:48:28.244858Z","iopub.execute_input":"2024-05-18T04:48:28.245242Z","iopub.status.idle":"2024-05-18T04:48:30.475713Z","shell.execute_reply.started":"2024-05-18T04:48:28.245196Z","shell.execute_reply":"2024-05-18T04:48:30.474724Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"Now, let's examine what the output shape of the preprocessing layer looks like. The output shape of the layer can be represented as $(num\\_responses, sequence\\_length)$.","metadata":{}},{"cell_type":"code","source":"outs = preprocessor(df.options.iloc[0])  # Process options for the first row\n\n# Display the shape of each processed output\nfor k, v in outs.items():\n    print(k, \":\", v.shape)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:48:30.476974Z","iopub.execute_input":"2024-05-18T04:48:30.477367Z","iopub.status.idle":"2024-05-18T04:48:31.642195Z","shell.execute_reply.started":"2024-05-18T04:48:30.47733Z","shell.execute_reply":"2024-05-18T04:48:31.641111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"We'll use the `preprocessing_fn` function to transform each text option using the `dataset.map(preprocessing_fn)` method.","metadata":{}},{"cell_type":"code","source":"def preprocess_fn(text, label=None):\n    text = preprocessor(text)  # Preprocess text\n    return (text, label) if label is not None else text  # Return processed text and label if available","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:48:31.643644Z","iopub.execute_input":"2024-05-18T04:48:31.64435Z","iopub.status.idle":"2024-05-18T04:48:31.650286Z","shell.execute_reply.started":"2024-05-18T04:48:31.644313Z","shell.execute_reply":"2024-05-18T04:48:31.64926Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🍚 | DataLoader\n\nThe code below sets up a robust data flow pipeline using `tf.data.Dataset` for data processing. Notable aspects of `tf.data` include its ability to simplify pipeline construction and represent components in sequences.\n\nTo learn more about `tf.data`, refer to this [documentation](https://www.tensorflow.org/guide/data).","metadata":{}},{"cell_type":"code","source":"def build_dataset(texts, labels=None, batch_size=32,\n                  cache=True, shuffle=1024):\n    AUTO = tf.data.AUTOTUNE  # AUTOTUNE option\n    slices = (texts,) if labels is None else (texts, keras.utils.to_categorical(labels, num_classes=3))  # Create slices\n    ds = tf.data.Dataset.from_tensor_slices(slices)  # Create dataset from slices\n    ds = ds.cache() if cache else ds  # Cache dataset if enabled\n    ds = ds.map(preprocess_fn, num_parallel_calls=AUTO)  # Map preprocessing function\n    opt = tf.data.Options()  # Create dataset options\n    if shuffle: \n        ds = ds.shuffle(shuffle, seed=CFG.seed)  # Shuffle dataset if enabled\n        opt.experimental_deterministic = False\n    ds = ds.with_options(opt)  # Set dataset options\n    ds = ds.batch(batch_size, drop_remainder=False)  # Batch dataset\n    ds = ds.prefetch(AUTO)  # Prefetch next batch\n    return ds  # Return the built dataset","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:48:31.651587Z","iopub.execute_input":"2024-05-18T04:48:31.651903Z","iopub.status.idle":"2024-05-18T04:48:31.661061Z","shell.execute_reply.started":"2024-05-18T04:48:31.651875Z","shell.execute_reply":"2024-05-18T04:48:31.660253Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Build Train/Valid Dataloader","metadata":{}},{"cell_type":"code","source":"# Train\ntrain_texts = train_df.options.tolist()  # Extract training texts\ntrain_labels = train_df.class_label.tolist()  # Extract training labels\ntrain_ds = build_dataset(train_texts, train_labels,\n                         batch_size=CFG.batch_size,\n                         shuffle=True)\n\n# Valid\nvalid_texts = valid_df.options.tolist()  # Extract validation texts\nvalid_labels = valid_df.class_label.tolist()  # Extract validation labels\nvalid_ds = build_dataset(valid_texts, valid_labels,\n                         batch_size=CFG.batch_size,\n                         shuffle=False)","metadata":{"_kg_hide-input":false,"execution":{"iopub.status.busy":"2024-05-18T04:48:31.662175Z","iopub.execute_input":"2024-05-18T04:48:31.66249Z","iopub.status.idle":"2024-05-18T04:48:34.477221Z","shell.execute_reply.started":"2024-05-18T04:48:31.662466Z","shell.execute_reply":"2024-05-18T04:48:34.47618Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ⚓ | LR Schedule\n\nImplementing a learning rate scheduler is crucial for transfer learning. The learning rate initiates at `lr_start` and gradually tapers down to `lr_min` using various techniques, including:\n- `step`: Lowering the learning rate in step-wise manner resembling stairs.\n- `cos`: Utilizing a cosine curve to gradually reduce the learning rate.\n- `exp`: Exponentially decreasing the learning rate.\n\n**Importance:** A well-structured learning rate schedule is essential for efficient model training, ensuring optimal convergence and avoiding issues such as overshooting or stagnation.","metadata":{}},{"cell_type":"code","source":"import math\n\ndef get_lr_callback(batch_size=8, mode='cos', epochs=10, plot=False):\n    lr_start, lr_max, lr_min = 1.0e-6, 0.6e-6 * batch_size, 1e-6\n    lr_ramp_ep, lr_sus_ep, lr_decay = 2, 0, 0.8\n\n    def lrfn(epoch):  # Learning rate update function\n        if epoch < lr_ramp_ep: lr = (lr_max - lr_start) / lr_ramp_ep * epoch + lr_start\n        elif epoch < lr_ramp_ep + lr_sus_ep: lr = lr_max\n        elif mode == 'exp': lr = (lr_max - lr_min) * lr_decay**(epoch - lr_ramp_ep - lr_sus_ep) + lr_min\n        elif mode == 'step': lr = lr_max * lr_decay**((epoch - lr_ramp_ep - lr_sus_ep) // 2)\n        elif mode == 'cos':\n            decay_total_epochs, decay_epoch_index = epochs - lr_ramp_ep - lr_sus_ep + 3, epoch - lr_ramp_ep - lr_sus_ep\n            phase = math.pi * decay_epoch_index / decay_total_epochs\n            lr = (lr_max - lr_min) * 0.5 * (1 + math.cos(phase)) + lr_min\n        return lr\n\n    if plot:  # Plot lr curve if plot is True\n        plt.figure(figsize=(10, 5))\n        plt.plot(np.arange(epochs), [lrfn(epoch) for epoch in np.arange(epochs)], marker='o')\n        plt.xlabel('epoch'); plt.ylabel('lr')\n        plt.title('LR Scheduler')\n        plt.show()\n\n    return keras.callbacks.LearningRateScheduler(lrfn, verbose=False)  # Create lr callback","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:48:34.478527Z","iopub.execute_input":"2024-05-18T04:48:34.478826Z","iopub.status.idle":"2024-05-18T04:48:34.489056Z","shell.execute_reply.started":"2024-05-18T04:48:34.4788Z","shell.execute_reply":"2024-05-18T04:48:34.487944Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"lr_cb = get_lr_callback(CFG.batch_size, plot=True)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:48:34.490151Z","iopub.execute_input":"2024-05-18T04:48:34.490448Z","iopub.status.idle":"2024-05-18T04:48:34.782454Z","shell.execute_reply.started":"2024-05-18T04:48:34.490426Z","shell.execute_reply":"2024-05-18T04:48:34.781529Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 💾 | Model Checkpointing\n\nThe following code will create a callback that will save the best checkpoint of the model during training, which we will use for inference in the submission.","metadata":{}},{"cell_type":"code","source":"ckpt_cb = keras.callbacks.ModelCheckpoint(f'best_model.weights.h5',\n                                          monitor='val_log_loss',\n                                          save_best_only=True,\n                                          save_weights_only=True,\n                                          mode='min')  # Get Model checkpoint callback","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:48:34.78359Z","iopub.execute_input":"2024-05-18T04:48:34.78393Z","iopub.status.idle":"2024-05-18T04:48:34.788505Z","shell.execute_reply.started":"2024-05-18T04:48:34.783898Z","shell.execute_reply":"2024-05-18T04:48:34.787657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 📏 | Metric\n\nThe metric for this competition is **Log Loss**. This metric can be expressed mathematically as,\n\n$$\n\\text{Log Loss} = -\\frac{1}{N} \\sum_{i=1}^{N} \\left( y_i \\log(p_i) + (1 - y_i) \\log(1 - p_i) \\right)\n$$\n\nwhere $ N $ is the number of samples, $ y_i $ is the true label, and $ p_i $ is the predicted probability of the sample belonging to the positive class.\n\nNote that this metric is similar to categorical cross entropy widely used in classification tasks. Thus, we don't need to implement the loss from scratch. As the Keras library already has an implementation of this metric, we will simply use the metric to monitor performance of our model.\n","metadata":{}},{"cell_type":"code","source":"log_loss = keras.metrics.CategoricalCrossentropy(name=\"log_loss\")","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:48:34.789628Z","iopub.execute_input":"2024-05-18T04:48:34.789965Z","iopub.status.idle":"2024-05-18T04:48:34.840185Z","shell.execute_reply.started":"2024-05-18T04:48:34.789942Z","shell.execute_reply":"2024-05-18T04:48:34.839436Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🤖 | Modeling\n\nThe `KerasNLP` library provides various NLP model architectures such as `Bert`, `Roberta`, `DebertaV3`, and more. While this notebook focuses on `DebertaV3`, you can explore others in the [KerasNLP documentation](https://keras.io/api/keras_nlp/models/). For a deeper understanding, refer to the [getting started guide](https://keras.io/guides/keras_nlp/getting_started/).\n\nOur approach utilizes `keras_nlp.models.DebertaV3Classifier` to process each prompt and response pair, generating output embeddings. We then concatenate these embeddings and pass them through a Pooling layer and a classifier to obtain logits, followed by a `softmax` function for the final output.\n\nWhen dealing with multiple responses, we use a weight-sharing strategy. This means we provide the model with one response at a time along with the prompt `(P + R_A)`, `(P + R_B)`, etc., using the same model weights for all responses. After obtaining embeddings for all responses, we concatenate them and apply average pooling. Next, we use a `Linear/Dense` layer along with the `Softmax` function as the classifier for the final result. Providing all responses at once would increase text length and complicate model handling. Note that, in the classifier, we use 3 classes for `winner_model_a`, `winner_model_b`, and `draw` cases.\n\nThe diagram below illustrates this approach:\n\n<div align=\"center\">\n    <img src=\"https://i.postimg.cc/g0gcvy3f/Kaggle-drawio.png\">\n</div>\n\nFrom a coding perspective, note that we use the same model for all responses with shared weights, contrary to the separate models implied in the diagram.","metadata":{}},{"cell_type":"code","source":"# Define input layers\ninputs = {\n    \"token_ids\": keras.Input(shape=(2, None), dtype=tf.int32, name=\"token_ids\"),\n    \"padding_mask\": keras.Input(shape=(2, None), dtype=tf.int32, name=\"padding_mask\"),\n}\n# Create a DebertaV3Classifier backbone\nbackbone = keras_nlp.models.DebertaV3Backbone.from_preset(\n    CFG.preset,\n)\n\n# Compute embeddings for first response: (P + R_A) using backbone\nresponse_a = {k: v[:, 0, :] for k, v in inputs.items()}\nembed_a = backbone(response_a)\n\n# Compute embeddings for second response: (P + R_B), using the same backbone\nresponse_b = {k: v[:, 1, :] for k, v in inputs.items()}\nembed_b = backbone(response_b)\n\n# Compute final output\nembeds = keras.layers.Concatenate(axis=-1)([embed_a, embed_b])\nembeds = keras.layers.GlobalAveragePooling1D()(embeds)\noutputs = keras.layers.Dense(3, activation=\"softmax\", name=\"classifier\")(embeds)\nmodel = keras.Model(inputs, outputs)\n\n# Compile the model with optimizer, loss, and metrics\nmodel.compile(\n    optimizer=keras.optimizers.Adam(5e-6),\n    loss=keras.losses.CategoricalCrossentropy(label_smoothing=0.02),\n    metrics=[\n        log_loss,\n        keras.metrics.CategoricalAccuracy(name=\"accuracy\"),\n    ],\n)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:59:28.520006Z","iopub.execute_input":"2024-05-18T04:59:28.520395Z","iopub.status.idle":"2024-05-18T04:59:33.728828Z","shell.execute_reply.started":"2024-05-18T04:59:28.520362Z","shell.execute_reply":"2024-05-18T04:59:33.728024Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Summary","metadata":{}},{"cell_type":"code","source":"model.summary()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:58:32.75774Z","iopub.execute_input":"2024-05-18T04:58:32.75803Z","iopub.status.idle":"2024-05-18T04:58:32.788624Z","shell.execute_reply.started":"2024-05-18T04:58:32.758007Z","shell.execute_reply":"2024-05-18T04:58:32.787777Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"### Model Plot\n\nIn the model graph below, it may seem there are **four** inputs, but actually, there are **two** as discussed before. Our input consists of two parts, one for each response. However, for each input, we have `token_ids` and `padding_mask`, which makes it look like we have four inputs, but in reality, we have two inputs.","metadata":{}},{"cell_type":"code","source":"keras.utils.plot_model(model, show_shapes=True, show_layer_names=True)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:59:47.388118Z","iopub.execute_input":"2024-05-18T04:59:47.388929Z","iopub.status.idle":"2024-05-18T04:59:47.860331Z","shell.execute_reply.started":"2024-05-18T04:59:47.388894Z","shell.execute_reply":"2024-05-18T04:59:47.858874Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🚂 | Training","metadata":{}},{"cell_type":"code","source":"# Start training the model\nhistory = model.fit(\n    train_ds,\n    epochs=CFG.epochs,\n    validation_data=valid_ds,\n    callbacks=[lr_cb, ckpt_cb]\n)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-05-18T04:09:31.639462Z","iopub.execute_input":"2024-05-18T04:09:31.63976Z","iopub.status.idle":"2024-05-18T04:10:32.84527Z","shell.execute_reply.started":"2024-05-18T04:09:31.639735Z","shell.execute_reply":"2024-05-18T04:10:32.843996Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"## Load Best Model\n\nAfter training, let's load the weight with best result to get the best performance.","metadata":{}},{"cell_type":"code","source":"model.load_weights('/kaggle/working/best_model.weights.h5')","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:10:32.846087Z","iopub.status.idle":"2024-05-18T04:10:32.846405Z","shell.execute_reply.started":"2024-05-18T04:10:32.846251Z","shell.execute_reply":"2024-05-18T04:10:32.846264Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🧪 | Prediction","metadata":{}},{"cell_type":"code","source":"# Build test dataset\ntest_texts = test_df.options.tolist()\ntest_ds = build_dataset(test_texts,\n                         batch_size=min(len(test_df), CFG.batch_size),\n                         shuffle=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:10:32.847894Z","iopub.status.idle":"2024-05-18T04:10:32.848365Z","shell.execute_reply.started":"2024-05-18T04:10:32.848137Z","shell.execute_reply":"2024-05-18T04:10:32.848156Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make predictions using the trained model on test data\ntest_preds = model.predict(test_ds, verbose=1)","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:10:32.849987Z","iopub.status.idle":"2024-05-18T04:10:32.85031Z","shell.execute_reply.started":"2024-05-18T04:10:32.850154Z","shell.execute_reply":"2024-05-18T04:10:32.850167Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 📬 | Submission\n\nFollowing code will prepare the submission file.","metadata":{}},{"cell_type":"code","source":"sub_df = test_df[[\"id\"]].copy()\nsub_df[CFG.class_names] = test_preds.tolist()\nsub_df.to_csv(\"submission.csv\", index=False)\nsub_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-05-18T04:10:32.851792Z","iopub.status.idle":"2024-05-18T04:10:32.852135Z","shell.execute_reply.started":"2024-05-18T04:10:32.851945Z","shell.execute_reply":"2024-05-18T04:10:32.851974Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# 🔭 | Future Directions\n\nIn this notebook, we've achieved a good score with a small model and modest token length. But there's plenty of room to improve. Here's how:\n\n1. Try bigger models like `Deberta-Base` or `Deberta-Small`, or even LLMs like `Gemma`.\n2. Increase max token length to reduce loss of data.\n3. Use a five-fold cross-validation and ensemble to make the model robust and get better scores.\n4. Add augmentation like shuffling response orders for more robust performance.","metadata":{}},{"cell_type":"markdown","source":"# 📌 | Reference\n\n* [LLM Science Exam: KerasCore + KerasNLP [TPU]](https://www.kaggle.com/code/awsaf49/llm-science-exam-kerascore-kerasnlp-tpu)\n* [AES 2.0: KerasNLP Starter](https://www.kaggle.com/code/awsaf49/aes-2-0-kerasnlp-starter)","metadata":{}}]}